@using Newtonsoft.Json
@model HappySitter.Models.SearchSitterViewModel

@{
    ViewBag.Title = "Create";
}

<style>
       /* Always set the map height explicitly to define the size of the div
    * element that contains the map. */
       #map {
           min-height: 450px;
           height: 100%;
       }
       /* Optional: Makes the sample page fill the window. */
       html, body {
           height: 100%;
           margin: 0;
           padding: 0;
       }
</style>





<script>

    

    @*<script>

        function DataParse() {
            var model = '@Html.Raw(Json.Encode(Model))';
            var data = JSON.parse(model);

            for (i = 0; i < data.length; i++) {
                ......
            }

            </script>*@
    var jsonModel = '@Html.Raw(ViewBag.jsonData)';
    var jsonSitters;
    if (jsonModel.length > 0)
    {
        jsonSitters = JSON.parse(jsonModel);
    }
    

    $(document).ready(function () {

        $('#datepicker1').datetimepicker({
            format: 'L'
        });
        $('#datetimepicker1').datetimepicker({
            format: 'LT'
        });
        $('#datetimepicker2').datetimepicker({
            format: 'LT'
        });

        //reservation from tomorrow
        $('#datepicker1').data("DateTimePicker").date(moment().add(1, 'days'));

        if ($("#FromTime").val() != "") {
            $("#datetimepicker1").data("DateTimePicker").date($("#FromTime").val());
        } else {
            $("#datetimepicker1").data("DateTimePicker").date(new Date());
        }
        if ($("#ToTime").val() != "") {
            $("#datetimepicker2").data("DateTimePicker").date($("#ToTime").val());
        }
    
        $('#btnSearch').click(function (e) {

            var serviceDate = $("#datepicker1").data("DateTimePicker").date().format("YYYY-MM-DD");
            var fromTime = $("#datetimepicker1").data("DateTimePicker").date().format("HH:mm");
            var toTime = $("#datetimepicker2").data("DateTimePicker").date().format("HH:mm");

            console.log(fromTime + " " + toTime);

            if (fromTime == null || toTime == null) {
                alert("Please enter correct reservation Time.");
                return false;
            }
            $("#ServiceDate").val(serviceDate);
            $("#FromTime").val(fromTime);
            $("#ToTime").val(toTime);
            document.getElementById("SearchSitterForm").submit();
            
        });

        //$('.btnPopupConfirmModal').click(function (e) {
        //    alert("tt");
        //    //var sitterid = $(this).data("sitterid");
        //    //alert("sitter id:" + sitterid);
        //});


        //$('.modal-body-confirm-reservation').on("click",
        //    "button.btnPopupConfirmModal",
        //    function (e) {
        //        alert("t");
        //        return false;

        //        //var staffAvailabilityIdToken = $(this).attr('data-staff-availability-id-token');
        //        //var deleteHoursZoneId = $(this).attr('data-zone-id');

        //        //$("#EditWorkingHoursModal").modal('hide');

        //        ////EditWorkingHoursModal
        //        //$('#deleteMsgPopup').modal('show');

        //        //$('#staffAvailabilityIdToken').val(staffAvailabilityIdToken);
        //        //$('#deleteHoursZoneId').val(deleteHoursZoneId);
        //    });

    });

    function openModalforConfirmation() {
        alert("Sorry. Development is not completed yet.!!!");
        return false;
    }


</script>

<h2>Book a Sitter</h2>

@using (Html.BeginForm("SearchSitter", "Reservations", FormMethod.Post, new { data_ajax = "false", id = "SearchSitterForm" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.HiddenFor(m => m.ServiceDate)
    @Html.HiddenFor(m => m.FromTime)
    @Html.HiddenFor(m => m.ToTime)
    @Html.HiddenFor(m => m.User.Latitude)
    @Html.HiddenFor(m => m.User.Longitude)
    @*@Html.HiddenFor(m => m.SitterListMarkerJsonSerialized)*@


    <div class="form-group">

        <div class='col-sm-3'>
            <strong>Service Date:</strong>
            <div class='input-group date' id='datepicker1' name="datepicker1">
                <input type='text' class="form-control" />
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-time"></span>
                </span>
            </div>
        </div>


        <div class='col-sm-2'>
            <strong>Time From</strong>
            <div class='input-group date' id='datetimepicker1' name="datetimepicker1">
                <input type='text' class="form-control" />
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-time"></span>
                </span>
            </div>
        </div>
        <div class='col-sm-2'>
            <strong>Time To</strong>
            <div class='input-group date' id='datetimepicker2' name="datetimepicker2">
                <input type='text' class="form-control" />
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-time"></span>
                </span>
            </div>
        </div>

        <div class='col-sm-1 '>
            <br/>
            <button type="button" id="btnSearch" class="btn btn-primary align-middle">Search</button>
        </div>

    </div>

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        <div id="map" class="col-sm-12"></div>
        <script src="/Content/js/CustomGoogleMapApi.js"></script>
        <script src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.ApiKey&libraries=places&callback=initMap" async defer></script>
    </div>



    @*<div class="form-group">
            <div class="col-sm-2">
                @Html.LabelFor(model => model.DayOfWeek, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-sm-10">
                @Html.EnumDropDownListFor(model => model.DayOfWeek, "Select a Day", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DayOfWeek, "", new { @class = "text-danger" })
            </div>
        </div>*@



    <div class="form-group">
        <div class="col-sm-offset-2 col-sm-10">
            <input id="btnSubmit" type="button" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>


}




<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<!-- Modal -->
<div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Modal Header</h4>
            </div>
            <div class="modal-body modal-body-confirm-reservation">
                <p>Some text in the modal.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
